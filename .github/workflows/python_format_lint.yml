name: "black-flake8-pytest-sphinx"
on:
  pull_request:
    branches:
      - main
      - 'staging/*'
jobs:
  black-format:
    # Check if the PR is not from a fork.
    # Due to token restrictions on public repository forks these workflows do not work for pull requests raised from forks.
    # Private repositories can be configured to enable workflows from forks to run without restriction.
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          ref: ${{ github.head_ref }}
      - name: black
        uses: lgeiger/black-action@v1.0.1
        with:
          args: --line-length 120 .
      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
      - name: Push changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'pd-github-actions'
          git config --global user.email 'github-actions@paralleldomain.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "Black formatted"
          git push
        shell: bash
  flake8-lint:
    needs: black-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - uses: TrueBrain/actions-flake8@v2
        with:
          max_line_length: 120
          ignore: "E203,F401,F407,W503"
  pytest:
    needs: flake8-lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PYTEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PYTEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Download  & Test with pytest
        run: |
          LOCAL_DATASET_PATH=$(mktemp -d)
          aws s3 sync '${{ secrets.DGP_DATASET_PATH }}' "$LOCAL_DATASET_PATH" --only-show-errors
          DGP_PATH="$LOCAL_DATASET_PATH" SKIP_ENCODER=1 SKIP_CACHE=1 pytest --verbose
        shell: bash
  sphinx-build:
    needs: pytest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Sphinx API Documentation
        run: |
          sudo apt-get update
          sudo apt-get install pandoc
          python -m pip install --upgrade pip
          python -m pip install -e .
          python -m pip install -r docs/requirements.txt
          sphinx-build -b html docs/source docs/build --keep-going -W
      - uses: actions/upload-artifact@v1
        with:
          name: API Documentation
          path: docs/build/

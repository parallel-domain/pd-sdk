{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# The AnyPath Object\n",
    "\n",
    "PD SDK's `AnyPath` objects are a layer build on top of Python's `pathlib.Path` as well as `S3Path`. As a result, it accepts both local file system paths and s3 addresses.\n",
    "`AnyPath` has most common methods known from `pathlib.Path` implemented and fitted towards also working with s3 addresses, when applicable.\n",
    "\n",
    "Whenever using any file or directory references in PD SDK, you should use an `AnyPath` instance to assure correct behaviour. In some methods, PD SDK accepts addresses in `str` format, then the conversion to `AnyPath` is handled internally for you.\n",
    "\n",
    "Simply import `AnyPath` as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "from paralleldomain.utilities.any_path import AnyPath\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Instantiate AnyPath for different addresses\n",
    "\n",
    "For local filesystem references, we can use either an absolute or a relative path."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/nisseknudsen/Data/testset_dgp\n",
      "testset_dgp\n",
      "s3://pd-sdk-c6b4d2ea-0301-46c9-8b63-ef20c0d014e9/testset_dgp\n"
     ]
    }
   ],
   "source": [
    "absolute_path = \"/home/nisseknudsen/Data/testset_dgp\"\n",
    "absolute_anypath = AnyPath(path=absolute_path)\n",
    "\n",
    "relative_path = \"testset_dgp\"\n",
    "relative_anypath = AnyPath(path=relative_path)\n",
    "\n",
    "s3_path = \"s3://pd-sdk-c6b4d2ea-0301-46c9-8b63-ef20c0d014e9/testset_dgp/\"\n",
    "s3_anypath = AnyPath(path=s3_path)\n",
    "\n",
    "print(absolute_anypath)\n",
    "print(relative_anypath)\n",
    "print(s3_anypath)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next, let's see how what files are present in each location.\n",
    "\n",
    "### Absolute + S3 Paths\n",
    "For the absolute and s3 path, we can simply go ahead and use the `.iterdir()` method to iterate over directory contents:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [],
   "source": [
    "content_absolute = []\n",
    "for fp_abs in absolute_anypath.iterdir():\n",
    "    content_absolute.append(fp_abs)\n",
    "\n",
    "content_s3 = []\n",
    "for fp_s3 in s3_anypath.iterdir():\n",
    "    content_s3.append(fp_s3)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We capture all contents for each `AnyPath` object in an array and can now print it out."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Content Absolute Path:\n",
      "/home/nisseknudsen/Data/testset_dgp/pd-sdk_test_set\n",
      "/home/nisseknudsen/Data/testset_dgp/scene_dataset.json\n",
      "\n",
      "Content S3 Path:\n",
      "s3://pd-sdk-c6b4d2ea-0301-46c9-8b63-ef20c0d014e9/testset_dgp/pd-sdk_test_set\n",
      "s3://pd-sdk-c6b4d2ea-0301-46c9-8b63-ef20c0d014e9/testset_dgp/scene_dataset.json\n"
     ]
    }
   ],
   "source": [
    "print(\"Content Absolute Path:\")\n",
    "print(*content_absolute, sep=\"\\n\")\n",
    "\n",
    "print(\"\\nContent S3 Path:\")\n",
    "print(*content_s3, sep=\"\\n\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As it turns out, both directories have the same content, just once on local filesystem and once on an s3 bucket.\n",
    "We can also observe that the return types are themselves `AnyPath` objects again."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type: <class 'paralleldomain.utilities.any_path.AnyPath'>\n"
     ]
    }
   ],
   "source": [
    "assert isinstance(content_absolute[0], AnyPath)\n",
    "print(f\"Type: {type(content_absolute[0])}\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Relative Paths\n",
    "For relative paths, we need to consider the current working directory (cwd) of our Python environment."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/nisseknudsen/Development/nisse_laptop_linux\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "print(os.getcwd())"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As we can see, the cwd is currently not set to the expected (`/home/nisseknudsen/Data`) parent directory. In fact, calling `.iterdir()` now will throw a `FileNotFoundError`, because no sub-directory can be found with such name."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nice try!\n",
      "Unfortunately, /home/nisseknudsen/Development/nisse_laptop_linux/testset_dgp does not exist.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    for fp_rel in relative_anypath.iterdir():\n",
    "        print(fp_rel)\n",
    "except FileNotFoundError:\n",
    "    print(f\"Nice try!\\nUnfortunately, {os.getcwd()}/{relative_anypath} does not exist.\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As a solution, we could either provide an absolute path as described above, or we can change the cwd of our Python environment appropriately.\n",
    "As a start, let's convert the relative `AnyPath` object to an absolute one."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [],
   "source": [
    "parent_path = \"/home/nisseknudsen/Data\"\n",
    "parent_anypath = AnyPath(parent_path)\n",
    "\n",
    "absolute_concatenated_path = parent_anypath / relative_anypath"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As you can see, the `__truediv__` operator works with `AnyPath` the same way as with `pathlib.Path` objects.\n",
    "Now we can compare that the contents of the absolute path equal the content of the concatenated path.  Since we receive `AnyPath` objects, we can not compare them directly but need to compare the string representations."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "True"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "content_relative = []\n",
    "for fp_abs in absolute_concatenated_path.iterdir():\n",
    "    content_relative.append(fp_abs)\n",
    "\n",
    "# cast each `AnyPath` to `str` and generated `list` for comparison.\n",
    "list(map(str, content_absolute)) == list(map(str, content_relative))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next, let's change the cwd of the Python environment.\n",
    "\n",
    "**Note:** This can have several side effects for other packages that rely on `os.getcwd()`. Please handle with care."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[testset_dgp/pd-sdk_test_set, testset_dgp/scene_dataset.json]\n"
     ]
    }
   ],
   "source": [
    "os.chdir(parent_path)\n",
    "print(list(relative_anypath.iterdir()))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The simple print statement shows the expected files, just by using now the `relative_anypath` object without having to concatenate any absolute path information beforehand."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## File Access\n",
    "In the `.iterdir()` example above we have received new `AnyPath` objects that sometimes point at files we want to access. We can also construct directly a file reference through `AnyPath` if we know the target."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/nisseknudsen/Data/testset_dgp/scene_dataset.json found!\n"
     ]
    }
   ],
   "source": [
    "scene_file = absolute_anypath / \"scene_dataset.json\"\n",
    "assert scene_file.exists()\n",
    "print(f\"{scene_file} found!\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Files buffers are accessed through the instance method `.open()`. The API Reference docs provide more detail into all available parameters, but most importantly it accepts the `mode` for read/write and text/bytes.\n",
    "In this case, we want to load the `scene_dataset.json` file and deserialize it into a `dict`."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['metadata', 'scene_splits'])\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "with scene_file.open(mode=\"r\") as fp:\n",
    "    scene_dict = json.load(fp)\n",
    "\n",
    "print(scene_dict.keys())"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The printed keys are correct. Let's add another key and save the contents to a new file."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/tmp/tmpcfudqj12\n"
     ]
    }
   ],
   "source": [
    "import tempfile\n",
    "_, out_file = tempfile.mkstemp()\n",
    "out_file = AnyPath(out_file)\n",
    "\n",
    "print(out_file)\n",
    "\n",
    "scene_dict[\"metadata\"][\"foo\"] = \"bar\"\n",
    "\n",
    "with out_file.open(\"w\") as fp:\n",
    "    json.dump(scene_dict, fp, indent=2)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Last but not least, let's check if the file was written correctly by doing a simple print and using Python's std IO library."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"metadata\": {\n",
      "    \"name\": \"DefaultDatasetName\",\n",
      "    \"version\": \"\",\n",
      "    \"creation_date\": \"2021-06-22T15:16:21.317Z\",\n",
      "    \"creator\": \"\",\n",
      "    \"description\": \"\",\n",
      "    \"origin\": \"INTERNAL\",\n",
      "    \"available_annotation_types\": [\n",
      "      0,\n",
      "      1,\n",
      "      2,\n",
      "      3,\n",
      "      4,\n",
      "      5,\n",
      "      6,\n",
      "      10,\n",
      "      7,\n",
      "      8,\n",
      "      9\n",
      "    ],\n",
      "    \"foo\": \"bar\"\n",
      "  },\n",
      "  \"scene_splits\": {\n",
      "    \"0\": {\n",
      "      \"filenames\": [\n",
      "        \"pd-sdk_test_set/scene_b16cbd4723f626cf87b96daab6b0efda68ca0454.json\"\n",
      "      ]\n",
      "    }\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "with open(str(out_file), \"r\") as fp:\n",
    "    print(fp.read())\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "name": "python3",
   "language": "python",
   "display_name": "Python 3 (ipykernel)"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
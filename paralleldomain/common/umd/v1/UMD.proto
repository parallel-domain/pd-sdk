// Copyright (c) 2021 Parallel Domain Inc.
// All rights reserved.
//
// Use of these files is only permitted if you have entered into a separate written license agreement with Parallel Domain Inc.
// Version 1.1.0

syntax = "proto2";

package umd;

message Point_LLA
{
    required double lat = 1;
    required double lon = 2;
    required double alt = 3;
}

message Point_ECEF
{
    required double x = 1;
    required double y = 2;
    required double z = 3;
}

message Point_ENU
{
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

message Quaternion
{
    required float w = 1;
    required float x = 2;
    required float y = 3;
    required float z = 4;
}

message AABB
{
    required Point_ENU min = 1;
    required Point_ENU max = 2;
}

message Edge
{
    required uint64     id          = 1;
    required bool       open        = 2;

    repeated Point_ENU  points      = 3;

    optional string     user_data   = 4;
}

message Info
{
    required string name = 1;
    required Point_LLA origin = 2;
}

message LaneSegment
{
    enum LaneType
    {
        UNDEFINED_LANE = 0;
        DRIVABLE       = 1;
        NON_DRIVABLE   = 2;
        PARKING        = 3;
        SHOULDER       = 4;
        BIKING         = 5;
        CROSSWALK      = 6;
        RESTRICTED     = 7;
        PARKING_AISLE  = 8;
        PARKING_SPACE  = 9;
    }

    enum Direction
    {
        UNDEFINED_DIR  = 0;
        FORWARD        = 1;
        BACKWARD       = 2;
        BIDIRECTIONAL  = 3;
    }

    enum TurnType
    {
        STRAIGHT        = 0;
        LEFT            = 1;
        RIGHT           = 2;
        SLIGHT_LEFT     = 3;
        SLIGHT_RIGHT    = 4;
        U_TURN          = 5;
    }

    required uint64     id              = 1;
    required LaneType   type            = 2;
    required Direction  direction       = 3;

    // All UMD object references are stored by ID
    required uint64     road            = 4;    // RoadSegment - This id should link to the RoadSegment that contains this lane, except in the case of CROSSWALK, in which case the id will be 0.
    required uint64     left_edge       = 5;    // Edge
    required uint64     right_edge      = 6;    // Edge

    required uint64     reference_line  = 7;    // Edge

    repeated uint64     predecessors    = 8;    // LaneSegment
    repeated uint64     successors      = 9;    // LaneSegment

    optional uint64     left_neighbor   = 10;   // LaneSegment
    optional uint64     right_neighbor  = 11;   // LaneSegment

    optional double     compass_angle   = 12;   // Angle between outgoing direction and North
    optional double     turn_angle      = 13;   // Angle between incoming and outgoing directions
    optional TurnType   turn_type       = 15;   // An option tag that tells us what type of turn lane this is
    optional string     user_data       = 14;
}

message RoadSegment
{
    enum RoadType
    {
        MOTORWAY        = 0;
        TRUNK           = 1;
        PRIMARY         = 2;
        SECONDARY       = 3;
        TERTIARY        = 4;
        UNCLASSIFIED    = 5;
        RESIDENTIAL     = 6;
        MOTORWAY_LINK   = 7;
        TRUNK_LINK      = 8;
        PRIMARY_LINK    = 9;
        SECONDARY_LINK  = 10;
        TERTIARY_LINK   = 11;
        SERVICE         = 12;
        DRIVEWAY        = 13;
        PARKING_AISLE   = 14;
    }

    enum GroundType
    {
        GROUND          = 0;
        BRIDGE          = 1;
        TUNNEL          = 2;
    }

    required uint64 id     = 1;
    required string name   = 2;

    // All UMD object references are stored by ID
    repeated uint64     predecessors    = 3; // RoadSegment
    repeated uint64     successors      = 4; // RoadSegment

    repeated uint64     lane_segments   = 5; // LaneSegment. Reminder that lane_segments should be ordered from left to right within the RoadSegment. See documentation for more.

    optional uint64     reference_line  = 6; // Edge

    optional RoadType   type            = 8;

    optional GroundType ground_type     = 11;

    optional SpeedLimit speed_limit     = 10;

    optional uint64     junction_id     = 9; // If this is set, this means that the RoadSegment is a junction route within the junction.

    optional string     user_data       = 7;
}

message SpeedLimit
{
    enum SpeedUnits
    {
        MILES_PER_HOUR      = 0;
        KILOMETERS_PER_HOUR = 1;
    }

    required uint32 speed       = 1;
    required SpeedUnits units   = 2;
}

message Area
{
    enum AreaType
    {
        BUILDING_COMMERCIAL     = 0;
        BUILDING_RESIDENTIAL    = 1;
        BUILDING_INDUSTRIAL     = 2;
        BUILDING_HOUSE          = 3;
        BUILDING_APARTMENT      = 8;
        BUILDING_GARAGE         = 9;
        BUILDING_GAS            = 10;
        BUILDING_PARKING        = 11;
        BUILDING_OFFICE         = 12;
        BUILDING_RETAIL         = 13;
        BUILDING_SCHOOL         = 14;
        BUILDING_WAREHOUSE      = 15;
        BUILDING_UNCLASSIFIED   = 29;
        EMPTY_LOT               = 7;
        PARKING_LOT             = 4;
        PARKING_SPACE           = 5;
        PARK                    = 6;
        POWER                   = 18;
        RAIL                    = 19;
        SIDEWALK                = 17;
        UNCLASSIFIED            = 16;
        WATER                   = 20;
		ZONE_BROWN			    = 21;
        ZONE_COMMERCIAL		    = 22;
        ZONE_GREEN			    = 23;
        ZONE_INDUSTRIAL		    = 24;
        ZONE_RESIDENTIAL	    = 25;
        ZONE_RETAIL 		    = 26;
        ZONE_WATER			    = 27;
        SPEEDBUMP               = 28;
        CONSTRUCTION            = 30;
        // etc...
    }

    required uint64     id          = 1;
    required AreaType   type        = 2;

    // Area boundaries can be defined by multiple edges
    repeated uint64     edges       = 3; // Edge

    // Optional height value for buildings and other structures
    optional float      height      = 4;

    // Optional number of floors for a building
    optional uint32     floors      = 6;

    optional string     user_data   = 5;
}

message ZoneGrid
{
    enum ZoneType
    {
        COMMERCIAL      = 0;
        RETAIL          = 1;
        INDUSTRIAL      = 2;
        RESIDENTIAL     = 3;
        PARKING         = 4;
        WATER           = 5; // Zones such as bays, rivers, ponds, lakes, etc.
        GREEN           = 6; // Zones such as parks, grass, forest, etc.
        BROWN           = 7; // Zones such as beaches, dirt, sand, etc.
        UNCLASSIFIED    = 8;
    }

    required Point_ENU bound_NE     = 1; // point that represents the upper right corner
    required Point_ENU bound_SW     = 2; // point that represents the lower left corner
    required uint32    lat_samples  = 3; // The number of samples in the latitudinal (north/south) direction
    required uint32    lon_samples  = 4; // The number of samples in the longitudinal (east/west) direction
    repeated ZoneType  points       = 5; // List of zone type sample points
}

message TrafficSignData
{
    enum SignType
    {
        REGULATORY_STOP_YIELD_PEDESTRIAN_CROSSING                   = 0;
        REGULATORY_SPEED_REGULATION                                 = 1;
        REGULATORY_TURN_AND_LANE_USE                                = 2;
        REGULATORY_MOVEMENT_REGULATION                              = 3;
        REGULATORY_SELECTIVE_EXCLUSION                              = 4;
        REGULATORY_ONE_WAY_DIVIDED_HIGHWAY_ROUNDABOUT               = 5;
        REGULATORY_PARKING_REGULATION                               = 6;
        REGULATORY_PARKING_PROHIBITION_EMERGENCY_RESTRICTION_RAIL   = 7;
        REGULATORY_PEDESTRIAN_BICYCLE_EQUESTRIAN                    = 8;
        REGULATORY_TRAFFIC_SIGNAL                                   = 9;
        REGULATORY_ROAD_CLOSURE                                     = 10;
        REGULATORY_WEIGHT_LIMIT                                     = 11;
        REGULATORY_WEIGH_STATION                                    = 12;
        REGULATORY_TRUCK_ROUTE                                      = 13;
        REGULATORY_RAILROAD_AND_LIGHT_RAIL                          = 14;
        REGULATORY_SEATBELT_CRASH_CLEARANCE_HEADLIGHT_USE           = 15;
        WARNING_TURN_AND_CURVE                                      = 16;
        WARNING_INTERSECTION                                        = 17;
        WARNING_ADVANCE_TRAFFIC_CONTROL                             = 18;
        WARNING_MERGE_AND_LANE_TRANSITION                           = 19;
        WARNING_WIDTH_RESTRICTION                                   = 20;
        WARNING_DIVIDED_HIGHWAY                                     = 21;
        WARNING_HILL                                                = 22;
        WARNING_PAVEMENT_CONDITION                                  = 23;
        WARNING_LANE_TRANSITION                                     = 24;
        WARNING_RAILROAD_AND_LIGHT_RAIL                             = 25;
        WARNING_ADVANCE_WARNING_CROSSING                            = 26;
        WARNING_LOW_CLEARANCE                                       = 27;
        WARNING_ADVISORY_SPEED                                      = 28;
        WARNING_DEAD_END_NO_OUTLET_NO_PASSING                       = 29;
        WARNING_PLAYGROUND                                          = 30;
        WARNING_SUPPLEMENTAL_PLAQUES                                = 31;
        WARNING_SPEED_HUMP                                          = 32;
        WARNING_NO_TRAFFIC_SIGNS                                    = 33;
        WARNING_WORK_ZONE                                           = 34;
        WARNING_ROAD_WORK                                           = 35;
        WARNING_BLASTING                                            = 36;
        WARNING_SLOW_TRAFFIC                                        = 37;
        WARNING_DOUBLE_REVERSE_CURVE                                = 38;
        WARNING_YELLOW_TRAP                                         = 39;
        MARKER_ROUTE_MARKERS                                        = 40;
        MARKER_JUNCTION_SIGNS                                       = 41;
        MARKER_CARDINAL_DIRECTIONAL_AUXILLARIES                     = 42;
        MARKER_ALTERNATIVE_ROUTE_SIGNS                              = 43;
        MARKER_ADVANCE_TURN_AUXILLARIES                             = 44;
        MARKER_DIRECTIONAL_ARROW_AUXILLARIES                        = 45;
        MARKER_DIRECTIONAL_ARROW_AUXILLARIES_BICYCLE                = 46;
        GUIDE_DESTINATION                                           = 47;
        GUIDE_DISTANCE                                              = 48;
        GUIDE_STREET_NAME                                           = 49;
        GUIDE_PARKING                                               = 50;
        GUIDE_REST_AREA                                             = 51;
        GUIDE_SCENIC                                                = 52;
        GUIDE_RECREATIONAL                                          = 53;
        GUIDE_WEIGH_STATION                                         = 54;
        GUIDE_GENERAL_SERVICES                                      = 55;
        GUIDE_REFERENCE_LOCATION_MILEPOSTS                          = 56;
        GUIDE_BICYCLE                                               = 57;
        GUIDE_GENERAL_INFORMATION                                   = 58;
        GUIDE_CROSSOVER_FREEWAY_ENTRANCE                            = 59;
        GUIDE_EXPRESSWAY_AND_FREEWAY                                = 60;
        GUIDE_WORK_ZONE_INFORMATION                                 = 61;
        GUIDE_RECREATIONAL_AND_CULTURAL_INTEREST                    = 62;
        CULTURAL_INTEREST_GENERAL_INFORMATION                       = 63;
        CULTURAL_INTEREST_TRAVELER_SERVICES                         = 64;
        CULTURAL_INTEREST_ACCOMMODATION_SERVICES                    = 65;
        CULTURAL_INTEREST_LAND_RECREATION                           = 66;
        CULTURAL_INTEREST_WATER_RECREATION                          = 67;
        CULTURAL_INTEREST_WINTER_RECREATION                         = 68;
        OBJECT_MARKER                                               = 69;
        BICYCLE_FACILITIES                                          = 70;
        SCHOOL                                                      = 71;
        EMERGENCY_MANAGEMENT_CIVIL_DEFENSE                          = 72;
    }

    oneof data
    {
        SignType    type        = 1;
        string      sign_code   = 2;

        // Face value and text used by some SignType categories
        uint32      face_value  = 3;
        string      face_text   = 4;

        string      asset_name  = 5;
    }
}

message TrafficLightData
{
    // Link to junction containing traffic light
    required uint64 signaled_intersection_id    = 1;

    // A list of bulbs contained in this traffic light box
    repeated TrafficLightBulb bulbs             = 2;

    // An optional reference to the asset for this traffic light box
    optional string asset_name                  = 3;
}

message TrafficLightBulb
{
    enum Shape
    {
        CIRCLE                  = 0;
        ARROW_LEFT              = 1;
        ARROW_LEFT_DIAGONAL     = 2;
        ARROW_RIGHT             = 3;
        ARROW_RIGHT_DIAGONAL    = 4;
        ARROW_UP                = 6;
        ARROW_DOWN              = 7;
        U_TURN                  = 5;
        BICYCLE                 = 8;
        WALK                    = 9;
        DONT_WALK               = 10;
        NUMBER                  = 11;
    }

    enum Color
    {
        RED     = 0;
        YELLOW  = 1;
        GREEN   = 2;
    }

    required Shape shape        = 1;
    required Color color        = 2;

    // Note that this phase_id is only unique within the SignaledIntersection that the parent TrafficLight belongs to
    required uint64 phase_id    = 3;

    // An optional flag to mark this bulb as flashing
    optional bool is_flashing   = 4;
}

message PropData
{
    enum PropType
    {
        VEHICLE         = 0;
        TERRAIN_NATURAL = 1;
        VEGETATION_HIGH = 2;
        VEGETATION_LOW  = 3;
        BUILDING        = 4;
        HARDSCAPE       = 5;
        BARRIER         = 6;
        POLE            = 7;
        OTHER           = 8;
    }

    // One of either PropType or asset name to specify object
    oneof data
    {
        PropType    type        = 1;
        string      asset_name  = 2;
    }
}

message Object
{
    required uint64         id                  = 1;

    // Orientation of object
    required Quaternion     orientation         = 3;

    // Placement of object specified either as origin position or bounding box
    oneof placement
    {
        Point_ENU           origin              = 2;
        AABB                bounding_box        = 4;
    }
    // Type specific object data
    oneof data
    {
        TrafficSignData     traffic_sign_data   = 5;
        TrafficLightData    traffic_light_data  = 6;
        PropData            prop_data           = 7;
    }

    // Exclusion radius to prevent spawning of other objects
    // < 0 -> use object aabb
    optional float          exclusion_radius    = 8 [default = -1];

    optional string         user_data           = 9;
}

message Junction
{
    required uint64 id                      = 1;

    // List of ids for all connector LaneSegments contained within the
    // Junction. Each LaneSegment must connect on either end to a LaneSegment
    // not contained within the Junction, and each LaneSegment must be
    // contained within a single RoadSegment containing only that LaneSegment
    repeated uint64 lane_segments           = 2;    // LaneSegment

    // List of ids for all RoadSegments used as containers for the Junction LaneSegments
    // in the above list. Each RoadSegment should contain only one LaneSegment, and
    // must be connected on either end to RoadSegments contained within the predecessor_roads
    // or successor_roads list below.
    // These connecting RoadSegments ensure that our maps RoadSegment's for a connected path
    // through the Junction, along routing and path-planning at the RoadSegment level if necessary
    repeated uint64 road_segments           = 3;    // RoadSegment

    // Optional id of SignaledIntersection used to control this Junction (if present)
    optional uint64 signaled_intersection   = 6;
    optional string user_data               = 7;

    // An optional list of edges that constitute the corners of the junction. Sorted in clockwise order.
    repeated uint64 corners                 = 8;

    // An optional list of crosswalk LaneSegments
    repeated uint64 crosswalk_lanes         = 9;

    // An optional id that points to a signed intersection
    optional uint64 signed_intersection     = 10;
}

message RoadMarking
{
    enum Type
    {
        SOLID         = 0;
        DASHED        = 1;
        SOLID_SOLID   = 2; // for double solid line
        SOLID_DASHED  = 3; // from left to right, note this is different from ODR spec
        DASHED_SOLID  = 4; // from left to right, note this is different from ODR spec
        DASHED_DASHED = 5; // for double dashed line
        BOTTS_DOTS    = 6; // For these three, we can specify as a RoadMark or should they be captured elsewhere
        NO_PAINT      = 7;
    }

    enum Color
    {
        WHITE  = 0;
        BLUE   = 1;
        GREEN  = 2;
        RED    = 3;
        YELLOW = 4;
    }

    // Unique ID for road marking
    required uint64 id              = 1;

    // ID of Edge defining geometry of marking
    required uint64 edge_id         = 2;

    // Width of lane marking (in m)
    required float width            = 3;

    // type of road marking
    optional Type type              = 4;

    // color of marking
    optional Color color            = 5;

    // length of the dashed line
    optional float dash_length      = 7;

    // space between dashes
    optional float dash_separation  = 8;

    // Optional flag to denote a stopline. Defaults to false.
    optional bool is_stopline       = 9;
}

message SignalOnset
{
    // TODO: to follow convention, these values should be capitalized!
    enum SignalState
    {
        red    = 0;
        yellow = 1;
        green  = 2;
    }

    // The time in the phase cycle when this state activates
    required double onset              = 1;

    // The type of signal state
    required SignalState signal_state  = 2;
}

message Phase
{
    required uint64 id                     = 1;
    repeated SignalOnset phase_timing      = 2;
	repeated uint64 controlled_lanes       = 3;
}

message SignaledIntersection
{
	required uint64 id                      = 1;
    required uint64 junction                = 2;
    repeated Phase phase_timings            = 3;
    required double cycle_time              = 4;
}

message SignedIntersection
{
    required uint64 id                      = 1;
    required uint64 junction                = 2;
    repeated uint64 stop_sign_lane_ids      = 3;
    repeated uint64 yield_sign_lane_ids     = 4;
}

message UniversalMap
{
    required    Info                    info                            = 1;
    map<uint64, RoadSegment>            road_segments                   = 2;
    map<uint64, LaneSegment>            lane_segments                   = 3;
    map<uint64, Area>                   areas                           = 4;
    map<uint64, Object>                 objects                         = 5;
    map<uint64, Edge>                   edges                           = 6;
    map<uint64, Junction>               junctions                       = 7;
    map<uint64, RoadMarking>            road_markings                   = 9;
    map<uint64, SignaledIntersection>   signaled_intersections          = 10;
    map<uint64, SignedIntersection>     signed_intersections            = 12;
    optional    ZoneGrid                zone_grid                       = 11;
}
